// <auto-generated />
using System;
using HRM.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HRM.Migrations.HRM
{
    [DbContext(typeof(HRMContext))]
    [Migration("20211127131940_HRM")]
    partial class HRM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Vietnamese_Vietnam.1258")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("HRM.Models.Account", b =>
                {
                    b.Property<string>("Account1")
                        .HasColumnType("text")
                        .HasColumnName("account");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Account1")
                        .HasName("pk_account");

                    b.HasIndex("EmployeeId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("HRM.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("HRM.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("HRM.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HRM.Models.Assessment", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int?>("AssessmentType")
                        .HasColumnType("integer")
                        .HasColumnName("assessment_type");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("SrcFile")
                        .HasColumnType("json")
                        .HasColumnName("src_file");

                    b.HasKey("EmployeeId", "CreateAt")
                        .HasName("pk_assessment");

                    b.HasIndex("AssessmentType");

                    b.ToTable("assessment");
                });

            modelBuilder.Entity("HRM.Models.AssessmentType", b =>
                {
                    b.Property<int>("AssessmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("assessment_type_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("AssessmentTypeId");

                    b.ToTable("assessment_type");
                });

            modelBuilder.Entity("HRM.Models.Calendar", b =>
                {
                    b.Property<string>("CalendarId")
                        .HasColumnType("text")
                        .HasColumnName("calendar_id");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("date")
                        .HasColumnName("end_at");

                    b.Property<int?>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("date")
                        .HasColumnName("start_at");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("CalendarId");

                    b.ToTable("calendar");
                });

            modelBuilder.Entity("HRM.Models.CalendarDetail", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("CalendarId")
                        .HasColumnType("text")
                        .HasColumnName("calendar_id");

                    b.Property<int>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<TimeSpan?>("ActualEnd")
                        .HasColumnType("time without time zone")
                        .HasColumnName("actual_end");

                    b.Property<TimeSpan?>("ActualStart")
                        .HasColumnType("time without time zone")
                        .HasColumnName("actual_start");

                    b.Property<TimeSpan?>("End")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end");

                    b.Property<bool?>("IsAttendance")
                        .HasColumnType("boolean")
                        .HasColumnName("is_attendance");

                    b.Property<bool?>("IsLeavePermission")
                        .HasColumnType("boolean")
                        .HasColumnName("is_leave_permission");

                    b.Property<bool?>("IsOvertime")
                        .HasColumnType("boolean")
                        .HasColumnName("is_overtime");

                    b.Property<bool?>("IsWork")
                        .HasColumnType("boolean")
                        .HasColumnName("is_work");

                    b.Property<TimeSpan?>("Start")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start");

                    b.HasKey("EmployeeId", "CalendarId", "Shift", "Day")
                        .HasName("pk_calendar_detail");

                    b.HasIndex("CalendarId");

                    b.ToTable("calendar_detail");
                });

            modelBuilder.Entity("HRM.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("department_id")
                        .HasIdentityOptions(null, null, null, 100000L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId");

                    b.ToTable("department");
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("employee_id")
                        .HasIdentityOptions(null, null, null, 100000L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<int?>("ApproverInternship")
                        .HasColumnType("integer")
                        .HasColumnName("approver_internship");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Birth")
                        .HasColumnType("date")
                        .HasColumnName("birth");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsInternship")
                        .HasColumnType("boolean")
                        .HasColumnName("is_internship");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<DateTime?>("JoinInternshipDate")
                        .HasColumnType("date")
                        .HasColumnName("join_internship_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal?>("PhoneNumber")
                        .HasColumnType("numeric")
                        .HasColumnName("phone_number");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<string>("StateInternship")
                        .HasColumnType("text")
                        .HasColumnName("state_internship");

                    b.Property<decimal?>("Wage")
                        .HasColumnType("money")
                        .HasColumnName("wage");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("HRM.Models.LeaveApplication", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("approved_at");

                    b.Property<int?>("Approver")
                        .HasColumnType("integer")
                        .HasColumnName("approver");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("day");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<int?>("Shift")
                        .HasColumnType("integer")
                        .HasColumnName("shift");

                    b.HasKey("EmployeeId", "CreateAt")
                        .HasName("pk_leave_application");

                    b.HasIndex("Approver");

                    b.ToTable("leave_application");
                });

            modelBuilder.Entity("HRM.Models.Notification", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("DepartmentId")
                        .HasName("notification_pkey");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("HRM.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("position_id")
                        .HasIdentityOptions(null, null, null, 100000L, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityAlwaysColumn);

                    b.Property<decimal?>("AverageWage")
                        .HasColumnType("money")
                        .HasColumnName("average_wage");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("PositionId");

                    b.ToTable("position");
                });

            modelBuilder.Entity("HRM.Models.Recruitment", b =>
                {
                    b.Property<int>("RecruitmentId")
                        .HasColumnType("integer")
                        .HasColumnName("recruitment_id");

                    b.Property<int?>("AppliedPosition")
                        .HasColumnType("integer")
                        .HasColumnName("applied_position");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("date")
                        .HasColumnName("approved_date");

                    b.Property<int?>("Approver")
                        .HasColumnType("integer")
                        .HasColumnName("approver");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("SrcFile")
                        .HasColumnType("json")
                        .HasColumnName("src_file");

                    b.Property<DateTime>("SubmissionAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("submission_at");

                    b.HasKey("RecruitmentId");

                    b.HasIndex("AppliedPosition");

                    b.HasIndex("Approver");

                    b.ToTable("recruitment");
                });

            modelBuilder.Entity("HRM.Models.Salary", b =>
                {
                    b.Property<string>("SalaryId")
                        .HasColumnType("text")
                        .HasColumnName("salary_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paid");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paid_date");

                    b.Property<decimal?>("TotalSalary")
                        .HasColumnType("money")
                        .HasColumnName("total_salary");

                    b.HasKey("SalaryId");

                    b.ToTable("salary");
                });

            modelBuilder.Entity("HRM.Models.SalaryDetail", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("employee_id");

                    b.Property<string>("SalaryId")
                        .HasColumnType("text")
                        .HasColumnName("salary_id");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("money")
                        .HasColumnName("salary");

                    b.HasKey("EmployeeId", "SalaryId", "CreateAt")
                        .HasName("salary_detail_pkey");

                    b.HasIndex("SalaryId");

                    b.ToTable("salary_detail");
                });

            modelBuilder.Entity("HRM.Models.Account", b =>
                {
                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("Accounts")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("HRM.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("HRM.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("HRM.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserRole", b =>
                {
                    b.HasOne("HRM.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRM.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRM.Models.AspNetUserToken", b =>
                {
                    b.HasOne("HRM.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HRM.Models.Assessment", b =>
                {
                    b.HasOne("HRM.Models.AssessmentType", "AssessmentTypeNavigation")
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentType")
                        .HasConstraintName("fk_assessment_type_id");

                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("Assessments")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee")
                        .IsRequired();

                    b.Navigation("AssessmentTypeNavigation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Models.CalendarDetail", b =>
                {
                    b.HasOne("HRM.Models.Calendar", "Calendar")
                        .WithMany("CalendarDetails")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("fk_calendar_id")
                        .IsRequired();

                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("CalendarDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee_id")
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.HasOne("HRM.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_department");

                    b.HasOne("HRM.Models.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_position");

                    b.Navigation("Department");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("HRM.Models.LeaveApplication", b =>
                {
                    b.HasOne("HRM.Models.Employee", "ApproverNavigation")
                        .WithMany("LeaveApplicationApproverNavigations")
                        .HasForeignKey("Approver")
                        .HasConstraintName("fk_approver");

                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("LeaveApplicationEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee")
                        .IsRequired();

                    b.Navigation("ApproverNavigation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRM.Models.Notification", b =>
                {
                    b.HasOne("HRM.Models.Department", "Department")
                        .WithOne("Notification")
                        .HasForeignKey("HRM.Models.Notification", "DepartmentId")
                        .HasConstraintName("fk_department")
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HRM.Models.Recruitment", b =>
                {
                    b.HasOne("HRM.Models.Position", "AppliedPositionNavigation")
                        .WithMany("Recruitments")
                        .HasForeignKey("AppliedPosition")
                        .HasConstraintName("fk_applied_position");

                    b.HasOne("HRM.Models.Employee", "ApproverNavigation")
                        .WithMany("Recruitments")
                        .HasForeignKey("Approver")
                        .HasConstraintName("fk_approver");

                    b.Navigation("AppliedPositionNavigation");

                    b.Navigation("ApproverNavigation");
                });

            modelBuilder.Entity("HRM.Models.SalaryDetail", b =>
                {
                    b.HasOne("HRM.Models.Employee", "Employee")
                        .WithMany("SalaryDetails")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee")
                        .IsRequired();

                    b.HasOne("HRM.Models.Salary", "SalaryNavigation")
                        .WithMany("SalaryDetails")
                        .HasForeignKey("SalaryId")
                        .HasConstraintName("fk_salary")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SalaryNavigation");
                });

            modelBuilder.Entity("HRM.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("HRM.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("HRM.Models.AssessmentType", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("HRM.Models.Calendar", b =>
                {
                    b.Navigation("CalendarDetails");
                });

            modelBuilder.Entity("HRM.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("HRM.Models.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Assessments");

                    b.Navigation("CalendarDetails");

                    b.Navigation("LeaveApplicationApproverNavigations");

                    b.Navigation("LeaveApplicationEmployees");

                    b.Navigation("Recruitments");

                    b.Navigation("SalaryDetails");
                });

            modelBuilder.Entity("HRM.Models.Position", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("HRM.Models.Salary", b =>
                {
                    b.Navigation("SalaryDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
