@page "/employee/profile/{EmployeeId:int}"
@using HRM.Components
@using HRM.Models
@using HRM.Services
@using MudBlazor
@inject EmployeeService EmployeeService
@inject DepartmentService DepartmentService
@inject PositionService PositionService
@inject IDialogService Dialog
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager

<MudGrid Justify="Justify.Center">
    <MudItem xs="3">
        <MudPaper Class="text-center py-8">
            <div class="my-3">
                <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSfYi6KIX_Q1h-ZWkASf29RMe15B0LwUSuszhbrG_C8HQ8jC70XDYrrgonZ6fs1iM7bsuA&usqp=CAU"
                     style="width:50%; border-radius:50%" />
            </div>
            <MudText Typo="Typo.h4" Inline="false">@_employee.Name</MudText>
            <MudText Typo="Typo.subtitle1" Inline="false">@_employee.Email</MudText>
            <div class="my-3">
                @if (_isEdit == false)
                {
                    <MudButton OnClick="OnEditEmployee"
                               Color="Color.Success"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.Edit">
                        Sửa thông tin
                    </MudButton>
                    <MudButton OnClick="OnCreateAccount"
                               Color="Color.Info"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.AccountCircle">
                        Tạo tài khoản
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="OnCancelEdit"
                               Color="Color.Error"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.Cancel">
                        Hủy
                    </MudButton>
                    <MudButton OnClick="OnSaveEdit"
                               Color="Color.Success"
                               Variant="Variant.Filled"
                               EndIcon="@Icons.Material.Filled.Save">
                        Lưu
                    </MudButton>
                }
            </div>
        </MudPaper>
    </MudItem>

    <MudItem xs="8">
        <MudPaper Class="py-8">
            @if (_isEdit == false)
            {
                <MudGrid>
                    <MudItem xs="6" Class="p-5">
                        <p style="font-size:20px">Chức vụ: @_position.Name</p>
                        <p style="font-size:20px">ngày sinh: @GetDate(_employee.Birth.ToString())</p>
                        <p style="font-size:20px">Giới tính: @_employee.Gender</p>
                    </MudItem>
                    <MudItem xs="6" Class="p-5">
                        <p style="font-size:20px">Phòng ban: @_department.Name</p>
                        <p style="font-size:20px">Tuổi: @GetAge(_employee.Birth.ToString())</p>
                        <p style="font-size:20px">Số diện thoại: 0@_employee.PhoneNumber</p>
                    </MudItem>
                    <MudItem xs="12" Class="p-5">
                        <p style="font-size:30px; font-weight:bold">Mô tả</p>
                        <p style="font-size:20px">@_employee.Description</p>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudGrid Class="px-2">
                    <MudItem xs="6">
                        <MudText>Thông tin cơ bản</MudText>
                        <MudTextField Variant="Variant.Outlined" Label="Họ tên nhân viên"
                                      @bind-Value="_employeeEdit.Name" Required="true"
                                      RequiredError="Không được để trống họ tên"
                                      Class="my-2" />

                        <MudTextField Variant="Variant.Outlined" Label="Email"
                                      @bind-Value="_employeeEdit.Email" Required="true"
                                      RequiredError="Không được để trống email"
                                      Class="my-2" />

                        <MudDatePicker @bind-Date="_employeeEdit.Birth"
                                       PickerVariant="PickerVariant.Dialog"
                                       Variant="Variant.Outlined"
                                       Label="Ngày sinh"
                                       TitleDateFormat="dd/MM/yyyy"
                                       DateFormat="dd/MM/yyyy"
                                       MaxDate="@DateTime.Now"
                                       Required="true"
                                       RequiredError="Không được để trống ngày sinh"
                                       Class="my-2" />
                        <div Class="my-2">
                            <MudText>Giới tính</MudText>
                            <MudRadioGroup @bind-SelectedOption="_employeeEdit.Gender" Required="true"
                                           RequiredError="Không được để trống giới tính">
                                <MudRadio Option="@("nam")" Color="Color.Primary" Dense="true">Nam</MudRadio>
                                <MudRadio Option="@("nữ")" Color="Color.Secondary" Dense="false">Nữ</MudRadio>
                            </MudRadioGroup>
                        </div>

                        <MudTextField @bind-Value="_employeeEdit.PhoneNumber"
                                      Variant="Variant.Outlined"
                                      Label="Số điện thoại"
                                      Adornment="Adornment.None"
                                      Required="true"
                                      RequiredError="Không được để trống số điện thoại"
                                      Class="my-2" />

                        <MudTextField @bind-Value="_employeeEdit.Description"
                                      T="string" Label="Mô tả"
                                      Variant="Variant.Outlined"
                                      Lines="4"
                                      Class="my-2" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudText Color="Color.Error">Thông tin quan trọng</MudText>
                        <MudSelect @bind-Value="@_employeeEdit.DepartmentId"
                                   T="int?"
                                   Label="Phòng ban" Strict="true"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Required="true"
                                   RequiredError="Không được để trống phòng ban"
                                   Class="my-2">
                            @foreach (var department in _listDepartments)
                            {
                                <MudSelectItem T="int?" Value="@department.DepartmentId">@department.Name</MudSelectItem>
                            }
                        </MudSelect>

                        <MudSelect @bind-Value="_employeeEdit.PositionId"
                                   T="int?"
                                   Label="Chức vụ" Strict="true"
                                   Variant="Variant.Outlined"
                                   AnchorOrigin="Origin.BottomCenter"
                                   Required="true"
                                   RequiredError="Không được để trống chức vụ"
                                   Class="my-2">
                            @foreach (var position in _listPositions)
                            {
                                <MudSelectItem T="int?" Value="@position.PositionId">@position.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public int EmployeeId { get; set; }
    private Employee _employee;
    private Employee _employeeEdit;
    private Models.Position _position;
    private Department _department;
    private bool _isEdit = false;
    private List<Models.Position> _listPositions;
    private List<Department> _listDepartments;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _employee = EmployeeService.GetEmployee(EmployeeId);
        _position = PositionService.GetPosition((int)_employee.PositionId);
        _department = DepartmentService.GetDepartment((int)_employee.DepartmentId);
        _listDepartments = DepartmentService.GetAllDepartments();
        _listPositions = PositionService.GetAllPositions();
    }

    void OnEditEmployee()
    {
        _employeeEdit = EmployeeService.GetEmployee(EmployeeId);
        _isEdit = true;
    }

    async Task OnCancelEdit()
    {
        await InvokeAsync(StateHasChanged);
        _isEdit = false;
    }

    async Task OnSaveEdit()
    {
        _isEdit = false;
        await InvokeAsync(StateHasChanged);
        EmployeeService.Update(_employeeEdit);
        _employee = EmployeeService.GetEmployee(EmployeeId);
        _position = PositionService.GetPosition((int)_employee.PositionId);
        _department = DepartmentService.GetDepartment((int)_employee.DepartmentId);
    }

    void OnCreateAccount()
    {
        sessionStorage.SetItemAsync("employee-create-account", _employee);
        Task.Delay(500);
        NavigationManager.NavigateTo($"/management/create-account");
    }

    string GetDate(string DateStr)
    {
        return DateStr.Split(" ")[0];
    }

    int GetAge(string DateStr)
    {
        string[] arrDateTime = DateStr.Split(" ");
        string[] arrDate = arrDateTime[0].Split("/");
        return DateTime.Now.Year - int.Parse(arrDate[2]);
    }
}
