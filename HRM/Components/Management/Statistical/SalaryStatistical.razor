@page "/management/salary"

@using System.IO;
@inject SalaryService SalaryService
@inject EmployeeService EmployeeService
@inject PositionService PositionService
@inject ExcelService ExcelService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@attribute [Authorize(Roles = "Admin")]

<div class="container">
    <div class="bg-white py-4">
        <MudTable Items="@_salaries" Hover="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Bảng lương</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Họ tên</MudTh>
                <MudTh>Chức vụ</MudTh>
                <MudTh>Lương</MudTh>
                <MudTh>Trả lương</MudTh>
                <MudTh>Ngày trả</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Họ tên">@GetNameFromSalaryId(context.SalaryId)</MudTd>
                <MudTd DataLabel="Chức vụ">@GetPositionFromSalaryId(context.SalaryId)</MudTd>
                <MudTd DataLabel="Lương">@(string.Format("{0:C}", context.TotalSalary)) VND</MudTd>
                <MudTd DataLabel="Trả lương">
                    <MudButton OnClick="()=>HandlePaidSalary(context.SalaryId)"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               Disabled="(bool)context.IsPaid">
                        @((bool)context.IsPaid ? "Đã trả" : "Chưa trả")
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="Ngày trả">
                    @if (context.PaidDate != null)
                    {
                        <p>@context.PaidDate.ToString().Split(" ")[0]</p>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
        <MudExpansionPanels Style="flex: 1;">
            <MudExpansionPanel Text="Thống kê tổng lương">
                <div>
                    <MudText Style="display:inline-block">Tổng tiền lương trong tháng @_currentMonth năm @_currentYear</MudText>
                    <MudText Style="display:inline-block" Class="float-right">@(string.Format("{0:C}", _totalPrice)) VND</MudText>
                </div>
                <div>
                    <MudText Style="display:inline-block">Tổng tiền lương đã trả</MudText>
                    <MudText Style="display:inline-block" Class="float-right">@(string.Format("{0:C}", _totalPricePaid)) VND</MudText>
                </div>
                <div>
                    <MudText Style="display:inline-block">Tổng tiền lương chưa trả</MudText>
                    <MudText Style="display:inline-block" Class="float-right">@(string.Format("{0:C}", _totalPriceUnPaid)) VND</MudText>
                </div>
            </MudExpansionPanel>
        </MudExpansionPanels>
        <div>
            <MudButton Color="Color.Success"
                       Class="m-1"
                       OnClick="CreateDocument">
                Tải file excel
            </MudButton>
        </div>
    </div>
</div>

@code {
    private List<Salary> _salaries;
    MemoryStream excelStream;
    private Decimal _totalPrice;
    private Decimal _totalPricePaid;
    private Decimal _totalPriceUnPaid;
    private int _currentMonth;
    private int _currentYear;

    protected override void OnInitialized()
    {
        _salaries = SalaryService.GetListSalaryCurrent();
        _totalPrice = (Decimal)_salaries.Sum(x => x.TotalSalary);
        _totalPricePaid = (Decimal)_salaries.Where(x => x.IsPaid == true).Sum(x => x.TotalSalary);
        _totalPriceUnPaid = _totalPrice - _totalPricePaid;
        _currentMonth = DateTime.Now.Month - 1;
        _currentYear = DateTime.Now.Year;
    }

    private String GetNameFromSalaryId(string salaryId)
    {
        return EmployeeService.GetEmployee(int.Parse(salaryId.Split("-")[0])).Name;
    }

    private String GetPositionFromSalaryId(string salaryId)
    {
        return PositionService.GetPosition((int)EmployeeService.GetEmployee(int.Parse(salaryId.Split("-")[0])).PositionId).Name;
    }

    private void HandlePaidSalary(string salaryId)
    {
        SalaryService.UpdatePaid(salaryId);
        _salaries.Where(x => x.SalaryId == salaryId).FirstOrDefault().IsPaid = true;
        _salaries.Where(x => x.SalaryId == salaryId).FirstOrDefault().PaidDate = DateTime.Now;
        Snackbar.Add($"Đã trả lương");
        _totalPricePaid = (Decimal)_salaries.Where(x => x.IsPaid == true).Sum(x => x.TotalSalary);
        _totalPriceUnPaid = _totalPrice - _totalPricePaid;
    }
    protected async void CreateDocument()
    {
        excelStream = ExcelService.CreateExcelSalary();
        await JSRuntime.InvokeAsync<object>("saveAsFile", "test.xlsx", excelStream.ToArray());
    }
}
